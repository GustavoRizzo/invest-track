[tool.poetry]
authors = ["Gustavo Rizzo S M de Albuquerque <grizzo.albu@gmail.com>"]
description = ""
name = "invest-track"
readme = "README.md"
version = "0.1.0"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry.dependencies]
django = ">=5.1.4"
django-auditlog = ">=3.0.0"
django-filter = ">=24.3"
djangorestframework = ">=3.15.2"
drf-yasg = ">=1.21.8"
faker = ">=33.3.0"
flake8 = ">=7.1.1"
gunicorn = ">=23.0.0"
model-bakery = ">=1.20.1"
psycopg2-binary = ">=2.9.10"
python = "^3.13.1"
requests = ">=2.32.3"
selenium = ">=4.27.1"
slippers = ">=0.6.2"
taskipy = "1.13"
yfinance = ">=0.2.51"

[tool.poetry.group.dev.dependencies]
flake8 = "^7.1.1"
flake8-pyproject = "^1.2.3"

[tool.flake8]
exclude = [
  # No need to traverse our git directory
  ".git",
  ".gitignore",
  ".gitattributes",
  ".gitmodules",
  ".gitkeep",
  ".gitlab-ci.yml", # There's no value in checking cache directories
  "__pycache__", # The conf file is mostly autogenerated, ignore it
  "docs/source/conf.py", # The old directory contains Flake8 2.0
  "old", # This contains our built documentation
  "build", # This contains builds of flake8 that we don't want to check
  "dist", # Ignore venv
  "venv",
  ".venv", # Ignore migrations
  "migrations", # Ignore media
  "media", # Ignore static
  "static", # Ignore templates
  "templates",
  "src",
  "config",
  "scripts", # Ignore temporary files
  "*.swp",
  "tmp",
  "temp",
  ".DS_Store",
  ".vscode",
  ".idea",
]
extend-ignore = ["F401", "F403", "F405"]
max-complexity = 13
max-line-length = 120

[tool.taskipy.settings]
use_vars = true

[tool.taskipy.variables]
# Variables
FIXTURES = ""

# Commands Variables
C_CREATE_SUPERUSER = "poetry run python ./manage.py createsuperuser"
C_LINT = "poetry run flake8"
C_LOADDATA = {var = "poetry run python ./manage.py loaddata {FIXTURES}", recursive = true}
C_MIGRATE = "poetry run python ./manage.py migrate"
C_RESET_DB = "poetry run python ./manage.py reset_db"
C_RUN_SERVER = "poetry run python ./manage.py runserver"
C_SETUP = "task migrate && task loaddata && task createsuperuser"
C_TEST = "PYTHONBREAKPOINT=ipdb.set_trace poetry run python ./manage.py test --settings=kernel.settings_test"
C_UPDATE_PERMISSIONS_GROUPS = "poetry run python manage.py dumpdata auth.Group --indent 4 --natural-foreign > auth/fixtures/groups.json"

[tool.taskipy.tasks]
compile-files-translation = {cmd = "poetry run python ./manage.py compilemessages", help = "Compile the translation files"}
createsuperuser = {cmd = "{C_CREATE_SUPERUSER}", help = "Create a superuser"}
lint = {cmd = "{C_LINT}", help = "Lint the code"}
loaddata = {cmd = "{C_LOADDATA}", help = "Load the fixtures"}
migrate = {cmd = "{C_MIGRATE}", help = "Run the migrations"}
ruff_fix_lint = {cmd = "{C_RUFF_FIX}", help = "Lint with ruff the code"}
ruff_lint = {cmd = "{C_RUFF}", help = "Lint with ruff the code"}
runserver = {cmd = "{C_RUN_SERVER}", help = "Run the server"}
setup = {cmd = "{C_SETUP}", help = "Run the migrations and create a superuser"}
test = {cmd = "{C_TEST}", help = "Run the tests"}
test-parallel = {cmd = "{C_TEST} --parallel 15", help = "Run the tests in parallel"}
update-files-translation = {cmd = "poetry run python ./manage.py makemessages -a", help = "Update the translation files"}
update-permissions-groups = {cmd = "{C_UPDATE_PERMISSIONS_GROUPS}", help = "Update the permissions groups"}

# imports
import-infomoney = {cmd = "poetry run python ./manage.py import_infomoney", help = "Import infomoney data"}
