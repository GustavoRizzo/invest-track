[tool.poetry]
authors = ["Gustavo Rizzo <grizzo.albu@gmail.com>"]
description = ""
name = "invest-track"
package-mode = false
readme = "README.md"
version = "0.1.0"

[tool.poetry.dependencies]
django = ">=5.1.4"
django-auditlog = ">=3.0.0"
django-filter = ">=24.3"
djangorestframework = ">=3.15.2"
drf-yasg = ">=1.21.8"
faker = ">=33.3.0"
flake8 = ">=7.1.1"
gunicorn = ">=23.0.0"
model-bakery = ">=1.20.1"
psycopg2-binary = ">=2.9.10"
python = "^3.13.1"
requests = ">=2.32.3"
selenium = ">=4.27.1"
slippers = ">=0.6.2"
taskipy = "1.13"
yfinance = ">=0.2.51"

[tool.poetry.group.dev.dependencies]
flake8 = "^7.1.1"
flake8-pyproject = "^1.2.3"

[tool.flake8]
exclude = [
  # No need to traverse our git directory
  ".git",
  ".gitignore",
  ".gitattributes",
  ".gitmodules",
  ".gitkeep",
  ".gitlab-ci.yml", # There's no value in checking cache directories
  "__pycache__", # The conf file is mostly autogenerated, ignore it
  "docs/source/conf.py", # The old directory contains Flake8 2.0
  "old", # This contains our built documentation
  "build", # This contains builds of flake8 that we don't want to check
  "dist", # Ignore venv
  "venv",
  ".venv", # Ignore migrations
  "migrations", # Ignore media
  "media", # Ignore static
  "static", # Ignore templates
  "templates",
  "src",
  "config",
  "scripts", # Ignore temporary files
  "*.swp",
  "tmp",
  "temp",
  ".DS_Store",
  ".vscode",
  ".idea",
]
extend-ignore = ["F401", "F403", "F405"]
max-complexity = 13
max-line-length = 120

[tool.taskipy.variables]
DATABASE = "postgres"
DOCKER_CMD = {var = "{DOCKER_ENV} docker", recursive = true}
DOCKER_COMPOSE = {var = "{DOCKER_CMD} compose", recursive = true}
DOCKER_COMPOSE_DEV = {var = "{DOCKER_COMPOSE} -f docker-compose-dev.yml", recursive = true}
DOCKER_ENV = {var = "PYTHON_VERSION={PYTHON_VERSION}", recursive = true}
PYTHON_VERSION = "3.12"
SERVICES = "backend postgres"
SERVICES_DEV = "backend-dev postgres"

[tool.taskipy.settings]
use_vars = true

[tool.taskipy.tasks]
build = {cmd = "{DOCKER_COMPOSE} build {SERVICES}", help = "Build images of production services"}
build-dev = {cmd = "{DOCKER_COMPOSE_DEV} build {SERVICES_DEV}", help = "Build images of development services"}
createsuperuser = {cmd = "python ./manage.py createsuperuser", help = "Create a superuser"}
eco = {cmd = "echo ola", help = "Run the linter and tests"}
lint = {cmd = "poetry run flake8 .", help = "Run the linter"}

migrate = {cmd = "python ./manage.py migrate", help = "Run the migrations"}
server = {cmd = "python ./manage.py runserver", help = "Run the server"}
setup = {cmd = "task migrate && task createsuperuser", help = "Run the migrations and create a superuser"}
up = {cmd = "{DOCKER_COMPOSE} up -d --force-recreate {SERVICES}", help = "Start production services"}
up-database = {cmd = "{DOCKER_COMPOSE} up -d {DATABASE}", help = "Start the database"}
up-dev = {cmd = "{DOCKER_COMPOSE_DEV} up -d --force-recreate {SERVICES_DEV}", help = "Start development services"}
